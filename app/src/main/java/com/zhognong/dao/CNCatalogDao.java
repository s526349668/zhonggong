package com.zhognong.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhognong.domain.CNCatalog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CNCATALOG".
*/
public class CNCatalogDao extends AbstractDao<CNCatalog, String> {

    public static final String TABLENAME = "CNCATALOG";

    /**
     * Properties of entity CNCatalog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Catalog_id = new Property(0, String.class, "catalog_id", true, "CATALOG_ID");
        public final static Property Catalog_name = new Property(1, String.class, "catalog_name", false, "CATALOG_NAME");
        public final static Property Is_audition = new Property(2, String.class, "is_audition", false, "IS_AUDITION");
        public final static Property Learning_contents = new Property(3, String.class, "learning_contents", false, "LEARNING_CONTENTS");
        public final static Property Learning_guide = new Property(4, String.class, "learning_guide", false, "LEARNING_GUIDE");
        public final static Property Learning_target = new Property(5, String.class, "learning_target", false, "LEARNING_TARGET");
        public final static Property Lesson_count = new Property(6, String.class, "lesson_count", false, "LESSON_COUNT");
        public final static Property Suggest_timelength = new Property(7, String.class, "suggest_timelength", false, "SUGGEST_TIMELENGTH");
        public final static Property Belong_course = new Property(8, String.class, "belong_course", false, "BELONG_COURSE");
    }


    public CNCatalogDao(DaoConfig config) {
        super(config);
    }
    
    public CNCatalogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CNCATALOG\" (" + //
                "\"CATALOG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: catalog_id
                "\"CATALOG_NAME\" TEXT," + // 1: catalog_name
                "\"IS_AUDITION\" TEXT," + // 2: is_audition
                "\"LEARNING_CONTENTS\" TEXT," + // 3: learning_contents
                "\"LEARNING_GUIDE\" TEXT," + // 4: learning_guide
                "\"LEARNING_TARGET\" TEXT," + // 5: learning_target
                "\"LESSON_COUNT\" TEXT," + // 6: lesson_count
                "\"SUGGEST_TIMELENGTH\" TEXT," + // 7: suggest_timelength
                "\"BELONG_COURSE\" TEXT);"); // 8: belong_course
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CNCATALOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CNCatalog entity) {
        stmt.clearBindings();
 
        String catalog_id = entity.getCatalog_id();
        if (catalog_id != null) {
            stmt.bindString(1, catalog_id);
        }
 
        String catalog_name = entity.getCatalog_name();
        if (catalog_name != null) {
            stmt.bindString(2, catalog_name);
        }
 
        String is_audition = entity.getIs_audition();
        if (is_audition != null) {
            stmt.bindString(3, is_audition);
        }
 
        String learning_contents = entity.getLearning_contents();
        if (learning_contents != null) {
            stmt.bindString(4, learning_contents);
        }
 
        String learning_guide = entity.getLearning_guide();
        if (learning_guide != null) {
            stmt.bindString(5, learning_guide);
        }
 
        String learning_target = entity.getLearning_target();
        if (learning_target != null) {
            stmt.bindString(6, learning_target);
        }
 
        String lesson_count = entity.getLesson_count();
        if (lesson_count != null) {
            stmt.bindString(7, lesson_count);
        }
 
        String suggest_timelength = entity.getSuggest_timelength();
        if (suggest_timelength != null) {
            stmt.bindString(8, suggest_timelength);
        }
 
        String belong_course = entity.getBelong_course();
        if (belong_course != null) {
            stmt.bindString(9, belong_course);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CNCatalog entity) {
        stmt.clearBindings();
 
        String catalog_id = entity.getCatalog_id();
        if (catalog_id != null) {
            stmt.bindString(1, catalog_id);
        }
 
        String catalog_name = entity.getCatalog_name();
        if (catalog_name != null) {
            stmt.bindString(2, catalog_name);
        }
 
        String is_audition = entity.getIs_audition();
        if (is_audition != null) {
            stmt.bindString(3, is_audition);
        }
 
        String learning_contents = entity.getLearning_contents();
        if (learning_contents != null) {
            stmt.bindString(4, learning_contents);
        }
 
        String learning_guide = entity.getLearning_guide();
        if (learning_guide != null) {
            stmt.bindString(5, learning_guide);
        }
 
        String learning_target = entity.getLearning_target();
        if (learning_target != null) {
            stmt.bindString(6, learning_target);
        }
 
        String lesson_count = entity.getLesson_count();
        if (lesson_count != null) {
            stmt.bindString(7, lesson_count);
        }
 
        String suggest_timelength = entity.getSuggest_timelength();
        if (suggest_timelength != null) {
            stmt.bindString(8, suggest_timelength);
        }
 
        String belong_course = entity.getBelong_course();
        if (belong_course != null) {
            stmt.bindString(9, belong_course);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CNCatalog readEntity(Cursor cursor, int offset) {
        CNCatalog entity = new CNCatalog( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // catalog_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // catalog_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // is_audition
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // learning_contents
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // learning_guide
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // learning_target
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lesson_count
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // suggest_timelength
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // belong_course
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CNCatalog entity, int offset) {
        entity.setCatalog_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCatalog_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIs_audition(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLearning_contents(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLearning_guide(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLearning_target(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLesson_count(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSuggest_timelength(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBelong_course(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CNCatalog entity, long rowId) {
        return entity.getCatalog_id();
    }
    
    @Override
    public String getKey(CNCatalog entity) {
        if(entity != null) {
            return entity.getCatalog_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CNCatalog entity) {
        return entity.getCatalog_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
