package com.zhognong.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.zhognong.domain.CNUser;

import com.zhognong.domain.CNCourse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CNCOURSE".
*/
public class CNCourseDao extends AbstractDao<CNCourse, String> {

    public static final String TABLENAME = "CNCOURSE";

    /**
     * Properties of entity CNCourse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Course_id = new Property(0, String.class, "course_id", true, "COURSE_ID");
        public final static Property Course_name = new Property(1, String.class, "course_name", false, "COURSE_NAME");
        public final static Property Course_type = new Property(2, String.class, "course_type", false, "COURSE_TYPE");
        public final static Property Expired_date = new Property(3, String.class, "expired_date", false, "EXPIRED_DATE");
        public final static Property Is_class = new Property(4, String.class, "is_class", false, "IS_CLASS");
        public final static Property Lesson_count = new Property(5, String.class, "lesson_count", false, "LESSON_COUNT");
        public final static Property Lesson_download_count = new Property(6, String.class, "lesson_download_count", false, "LESSON_DOWNLOAD_COUNT");
        public final static Property Parent_path = new Property(7, String.class, "parent_path", false, "PARENT_PATH");
        public final static Property Belong_user = new Property(8, String.class, "belong_user", false, "BELONG_USER");
        public final static Property Parent_course = new Property(9, String.class, "parent_course", false, "PARENT_COURSE");
    }

    private DaoSession daoSession;

    private Query<CNCourse> cNUser_CnCoursesQuery;

    public CNCourseDao(DaoConfig config) {
        super(config);
    }
    
    public CNCourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CNCOURSE\" (" + //
                "\"COURSE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: course_id
                "\"COURSE_NAME\" TEXT," + // 1: course_name
                "\"COURSE_TYPE\" TEXT," + // 2: course_type
                "\"EXPIRED_DATE\" TEXT," + // 3: expired_date
                "\"IS_CLASS\" TEXT," + // 4: is_class
                "\"LESSON_COUNT\" TEXT," + // 5: lesson_count
                "\"LESSON_DOWNLOAD_COUNT\" TEXT," + // 6: lesson_download_count
                "\"PARENT_PATH\" TEXT," + // 7: parent_path
                "\"BELONG_USER\" TEXT," + // 8: belong_user
                "\"PARENT_COURSE\" TEXT);"); // 9: parent_course
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CNCOURSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CNCourse entity) {
        stmt.clearBindings();
 
        String course_id = entity.getCourse_id();
        if (course_id != null) {
            stmt.bindString(1, course_id);
        }
 
        String course_name = entity.getCourse_name();
        if (course_name != null) {
            stmt.bindString(2, course_name);
        }
 
        String course_type = entity.getCourse_type();
        if (course_type != null) {
            stmt.bindString(3, course_type);
        }
 
        String expired_date = entity.getExpired_date();
        if (expired_date != null) {
            stmt.bindString(4, expired_date);
        }
 
        String is_class = entity.getIs_class();
        if (is_class != null) {
            stmt.bindString(5, is_class);
        }
 
        String lesson_count = entity.getLesson_count();
        if (lesson_count != null) {
            stmt.bindString(6, lesson_count);
        }
 
        String lesson_download_count = entity.getLesson_download_count();
        if (lesson_download_count != null) {
            stmt.bindString(7, lesson_download_count);
        }
 
        String parent_path = entity.getParent_path();
        if (parent_path != null) {
            stmt.bindString(8, parent_path);
        }
 
        String belong_user = entity.getBelong_user();
        if (belong_user != null) {
            stmt.bindString(9, belong_user);
        }
 
        String parent_course = entity.getParent_course();
        if (parent_course != null) {
            stmt.bindString(10, parent_course);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CNCourse entity) {
        stmt.clearBindings();
 
        String course_id = entity.getCourse_id();
        if (course_id != null) {
            stmt.bindString(1, course_id);
        }
 
        String course_name = entity.getCourse_name();
        if (course_name != null) {
            stmt.bindString(2, course_name);
        }
 
        String course_type = entity.getCourse_type();
        if (course_type != null) {
            stmt.bindString(3, course_type);
        }
 
        String expired_date = entity.getExpired_date();
        if (expired_date != null) {
            stmt.bindString(4, expired_date);
        }
 
        String is_class = entity.getIs_class();
        if (is_class != null) {
            stmt.bindString(5, is_class);
        }
 
        String lesson_count = entity.getLesson_count();
        if (lesson_count != null) {
            stmt.bindString(6, lesson_count);
        }
 
        String lesson_download_count = entity.getLesson_download_count();
        if (lesson_download_count != null) {
            stmt.bindString(7, lesson_download_count);
        }
 
        String parent_path = entity.getParent_path();
        if (parent_path != null) {
            stmt.bindString(8, parent_path);
        }
 
        String belong_user = entity.getBelong_user();
        if (belong_user != null) {
            stmt.bindString(9, belong_user);
        }
 
        String parent_course = entity.getParent_course();
        if (parent_course != null) {
            stmt.bindString(10, parent_course);
        }
    }

    @Override
    protected final void attachEntity(CNCourse entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CNCourse readEntity(Cursor cursor, int offset) {
        CNCourse entity = new CNCourse( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // course_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // course_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // course_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // expired_date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // is_class
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lesson_count
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lesson_download_count
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // parent_path
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // belong_user
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // parent_course
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CNCourse entity, int offset) {
        entity.setCourse_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCourse_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCourse_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExpired_date(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_class(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLesson_count(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLesson_download_count(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setParent_path(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBelong_user(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setParent_course(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CNCourse entity, long rowId) {
        return entity.getCourse_id();
    }
    
    @Override
    public String getKey(CNCourse entity) {
        if(entity != null) {
            return entity.getCourse_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CNCourse entity) {
        return entity.getCourse_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cnCourses" to-many relationship of CNUser. */
    public List<CNCourse> _queryCNUser_CnCourses(String belong_user) {
        synchronized (this) {
            if (cNUser_CnCoursesQuery == null) {
                QueryBuilder<CNCourse> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Belong_user.eq(null));
                cNUser_CnCoursesQuery = queryBuilder.build();
            }
        }
        Query<CNCourse> query = cNUser_CnCoursesQuery.forCurrentThread();
        query.setParameter(0, belong_user);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCNUserDao().getAllColumns());
            builder.append(" FROM CNCOURSE T");
            builder.append(" LEFT JOIN CNUSER T0 ON T.\"BELONG_USER\"=T0.\"USER_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CNCourse loadCurrentDeep(Cursor cursor, boolean lock) {
        CNCourse entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CNUser cnUser = loadCurrentOther(daoSession.getCNUserDao(), cursor, offset);
        entity.setCnUser(cnUser);

        return entity;    
    }

    public CNCourse loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CNCourse> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CNCourse> list = new ArrayList<CNCourse>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CNCourse> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CNCourse> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
