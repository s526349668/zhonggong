package com.zhognong.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhognong.domain.CNUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CNUSER".
*/
public class CNUserDao extends AbstractDao<CNUser, String> {

    public static final String TABLENAME = "CNUSER";

    /**
     * Properties of entity CNUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Device_id = new Property(0, String.class, "device_id", false, "DEVICE_ID");
        public final static Property Is_login = new Property(1, String.class, "is_login", false, "IS_LOGIN");
        public final static Property User_id = new Property(2, String.class, "user_id", true, "USER_ID");
        public final static Property User_name = new Property(3, String.class, "user_name", false, "USER_NAME");
        public final static Property User_passord = new Property(4, String.class, "user_passord", false, "USER_PASSORD");
        public final static Property User_tocket = new Property(5, String.class, "user_tocket", false, "USER_TOCKET");
    }

    private DaoSession daoSession;


    public CNUserDao(DaoConfig config) {
        super(config);
    }
    
    public CNUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CNUSER\" (" + //
                "\"DEVICE_ID\" TEXT," + // 0: device_id
                "\"IS_LOGIN\" TEXT," + // 1: is_login
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 2: user_id
                "\"USER_NAME\" TEXT," + // 3: user_name
                "\"USER_PASSORD\" TEXT," + // 4: user_passord
                "\"USER_TOCKET\" TEXT);"); // 5: user_tocket
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CNUSER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CNUser entity) {
        stmt.clearBindings();
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(1, device_id);
        }
 
        String is_login = entity.getIs_login();
        if (is_login != null) {
            stmt.bindString(2, is_login);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(4, user_name);
        }
 
        String user_passord = entity.getUser_passord();
        if (user_passord != null) {
            stmt.bindString(5, user_passord);
        }
 
        String user_tocket = entity.getUser_tocket();
        if (user_tocket != null) {
            stmt.bindString(6, user_tocket);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CNUser entity) {
        stmt.clearBindings();
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(1, device_id);
        }
 
        String is_login = entity.getIs_login();
        if (is_login != null) {
            stmt.bindString(2, is_login);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(4, user_name);
        }
 
        String user_passord = entity.getUser_passord();
        if (user_passord != null) {
            stmt.bindString(5, user_passord);
        }
 
        String user_tocket = entity.getUser_tocket();
        if (user_tocket != null) {
            stmt.bindString(6, user_tocket);
        }
    }

    @Override
    protected final void attachEntity(CNUser entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
    }    

    @Override
    public CNUser readEntity(Cursor cursor, int offset) {
        CNUser entity = new CNUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // device_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // is_login
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_passord
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // user_tocket
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CNUser entity, int offset) {
        entity.setDevice_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIs_login(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_passord(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_tocket(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CNUser entity, long rowId) {
        return entity.getUser_id();
    }
    
    @Override
    public String getKey(CNUser entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CNUser entity) {
        return entity.getUser_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
